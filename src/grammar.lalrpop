use std::str::FromStr;
use crate::ast::{BinOpKind, ExprF, ExprBoxed};

grammar;

pub Expr: ExprBoxed = {
    #[precedence(level="0")]
    Int => ExprBoxed(Box::new(ExprF::Int { n: <> })),
    Name => ExprBoxed(Box::new(ExprF::Var { name: <>.to_string() })),
    "(" <ExprReset> ")",

    #[precedence(level="1")]
    #[assoc(side="left")]
    <left:Expr> "*" <right:Expr> => ExprBoxed(Box::new(ExprF::BinOp { left, right, kind: BinOpKind::Mul })),
    <left:Expr> "/" <right:Expr> => ExprBoxed(Box::new(ExprF::BinOp { left, right, kind: BinOpKind::Div })),

    #[precedence(level="2")]
    #[assoc(side="left")]
    <left:Expr> "+" <right:Expr> => ExprBoxed(Box::new(ExprF::BinOp { left, right, kind: BinOpKind::Add })),
    <left:Expr> "-" <right:Expr> => ExprBoxed(Box::new(ExprF::BinOp { left, right, kind: BinOpKind::Sub })),

    // #[precedence(level="3")]
    // #[assoc(side="right")]
    // "let" <name:Name> "=" <value:Expr> "in" <body:Expr> => Box::new(Expr::Let(Let { name: name.to_string(), value, body })),

    #[precedence(level="4")]
    #[assoc(side="right")]
    "fun" <arg:Name> "->" <body:Expr> => ExprBoxed(Box::new(ExprF::Fun { arg: arg.to_string(), body })),

    #[precedence(level="5")]
    #[assoc(side="left")]
    <fun:Expr> <arg:Expr> => ExprBoxed(Box::new(ExprF::App { fun, arg }))
};

// See https://github.com/lalrpop/lalrpop/issues/596
ExprReset = <Expr>;

Int: i64 = r"\-?[0-9]+" => i64::from_str(<>).unwrap();

Name: &'input str = r"[a-zA-Z]+'?";

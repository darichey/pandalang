use std::str::FromStr;
use crate::ast::Expr;
use crate::ast::BinOpKind;

grammar;

pub Expr: Box<Expr> = {
    #[precedence(level="0")]
    Int => Box::new(Expr::Int(<>)),
    Var => Box::new(Expr::Var(<>.to_string())),

    #[precedence(level="1")]
    #[assoc(side="left")]
    <left:Expr> "*" <right:Expr> => Box::new(Expr::BinOp { left, right, kind: BinOpKind::Mul }),
    <left:Expr> "/" <right:Expr> => Box::new(Expr::BinOp { left, right, kind: BinOpKind::Div }),

    #[precedence(level="2")]
    #[assoc(side="left")]
    <left:Expr> "+" <right:Expr> => Box::new(Expr::BinOp { left, right, kind: BinOpKind::Add }),
    <left:Expr> "-" <right:Expr> => Box::new(Expr::BinOp { left, right, kind: BinOpKind::Sub }),
};

Int: i64 = r"\-?[0-9]+" => i64::from_str(<>).unwrap();

Var: &'input str = r"[a-zA-Z]+'?";

use std::str::FromStr;
use crate::ast::expr::{self, *};
use crate::ast::stmt::{self, *};
use crate::ast::Program;

grammar;

pub Program: Program = {
    (<Stmt>)+ => Program { stmts: <> }
}

pub Stmt: Stmt = {
    "let" <name:Name> "=" <value:Expr> => Stmt::Let(stmt::Let { name: name.to_string(), value }),
}

pub Expr: Box<Expr> = {
    #[precedence(level="0")]
    Int => Box::new(Expr::Int(Int { n: <> })),
    Str => Box::new(Expr::Str(Str { s: <> })),
    Name => Box::new(Expr::Var(Var { name: <>.to_string() })),
    "(" <ExprReset> ")",

    #[precedence(level="1")]
    #[assoc(side="left")]
    <fun:Expr> <arg:Expr> => Box::new(Expr::App(App { fun, arg })),

    #[precedence(level="2")]
    #[assoc(side="left")]
    <left:Expr> "*" <right:Expr> => Box::new(Expr::BinOp(BinOp { left, right, kind: BinOpKind::Mul })),
    <left:Expr> "/" <right:Expr> => Box::new(Expr::BinOp(BinOp { left, right, kind: BinOpKind::Div })),

    #[precedence(level="3")]
    #[assoc(side="left")]
    <left:Expr> "+" <right:Expr> => Box::new(Expr::BinOp(BinOp { left, right, kind: BinOpKind::Add })),
    <left:Expr> "-" <right:Expr> => Box::new(Expr::BinOp(BinOp { left, right, kind: BinOpKind::Sub })),

    #[precedence(level="4")]
    #[assoc(side="right")]
    "fun" <arg:Name> "->" <body:Expr> => Box::new(Expr::Fun(Fun { arg: arg.to_string(), body })),

    #[precedence(level="5")]
    #[assoc(side="right")]
    "let" <name:Name> "=" <value:Expr> "in" <body:Expr> => Box::new(Expr::Let(expr::Let { name: name.to_string(), value, body })),
};

// See https://github.com/lalrpop/lalrpop/issues/596
ExprReset = <Expr>;

Int: i64 = r"\-?[0-9]+" => i64::from_str(<>).unwrap();

Str: String = <s:r#""[^"]*""#> => String::from(&s[1..(s.len()-1)]);

Name: &'input str = r"[a-zA-Z]+'?";

use std::str::FromStr;
use crate::ast::expr::{self, Expr, BinOpKind};
use crate::ast::stmt::{self, Stmt};
use crate::ast::types::{self, Type};
use crate::ast::Program;

grammar;

pub Program: Program = {
    (<Stmt>)+ => Program { stmts: <> }
}

pub Stmt: Stmt = {
    "let" <rec:"rec"?> <name:Name> "=" <value:Expr> => Stmt::Let(stmt::Let { name: name.to_string(), value, rec: rec.is_some() }),
    "let" <rec:"rec"?> <name:Name> <arg:Name> "=" <value:Expr> => Stmt::Let(stmt::Let { name: name.to_string(), value: Box::new(Expr::Fun(expr::Fun { arg: arg.to_string(), body: value })), rec: rec.is_some() }),
    "declare" <name:Name> ":" <typ:Type> => Stmt::Declare(stmt::Declare { name: name.to_string(), typ: *typ })
}

pub Expr: Box<Expr> = {
    #[precedence(level="0")]
    Int => Box::new(Expr::Int(expr::Int { n: <> })),
    Str => Box::new(Expr::Str(expr::Str { s: <> })),
    Unit => Box::new(Expr::Unit),
    Bool => Box::new(Expr::Bool(expr::Bool { b: <> })),
    Name => Box::new(Expr::Var(expr::Var { name: <>.to_string() })),
    "(" <ExprReset> ")",

    #[precedence(level="1")]
    #[assoc(side="left")]
    <fun:Expr> <arg:Expr> => Box::new(Expr::App(expr::App { fun, arg })),

    #[precedence(level="2")]
    #[assoc(side="left")]
    <left:Expr> "*" <right:Expr> => Box::new(Expr::BinOp(expr::BinOp { left, right, kind: BinOpKind::Mul })),
    <left:Expr> "/" <right:Expr> => Box::new(Expr::BinOp(expr::BinOp { left, right, kind: BinOpKind::Div })),
    <left:Expr> "%" <right:Expr> => Box::new(Expr::BinOp(expr::BinOp { left, right, kind: BinOpKind::Rem })),

    #[precedence(level="3")]
    #[assoc(side="left")]
    <left:Expr> "+" <right:Expr> => Box::new(Expr::BinOp(expr::BinOp { left, right, kind: BinOpKind::Add })),
    <left:Expr> "-" <right:Expr> => Box::new(Expr::BinOp(expr::BinOp { left, right, kind: BinOpKind::Sub })),

    #[precedence(level="4")]
    #[assoc(side="none")]
    <left:Expr> "==" <right:Expr> => Box::new(Expr::BinOp(expr::BinOp { left, right, kind: BinOpKind::Eql })),

    #[precedence(level="5")]
    #[assoc(side="right")]
    "fun" <arg:Name> "->" <body:Expr> => Box::new(Expr::Fun(expr::Fun { arg: arg.to_string(), body })),    

    #[precedence(level="6")]
    "let" <rec:"rec"?> <name:Name> "=" <value:Expr> "in" <body:Expr> => Box::new(Expr::Let(expr::Let { name: name.to_string(), value, body, rec: rec.is_some() })),
    "let" <rec:"rec"?> <name:Name> <arg:Name> "=" <value:Expr> "in" <body:Expr> => Box::new(Expr::Let(expr::Let { name: name.to_string(), value: Box::new(Expr::Fun(expr::Fun { arg: arg.to_string(), body: value })), body, rec: rec.is_some() })),
    "if" <check:Expr> "then" <then:Expr> "else" <els:Expr> => Box::new(Expr::If(expr::If { check, then, els })),
};

// See https://github.com/lalrpop/lalrpop/issues/596
ExprReset = <Expr>;

pub Type: Box<Type> = {
    #[precedence(level="0")]
    "Int" => Box::new(Type::Simple("Int".to_string())),
    "Str" => Box::new(Type::Simple("Str".to_string())),
    "Unit" => Box::new(Type::Simple("Unit".to_string())),
    "(" <TypeReset> ")",

    #[precedence(level="1")]
    #[assoc(side="right")]
    <from:Type> "->" <to:Type> => Box::new(Type::Fun(types::Fun { from, to })),
}

TypeReset = <Type>;

Int: i64 = r"\-?[0-9]+" => i64::from_str(<>).unwrap();

Str: String = <s:r#""[^"]*""#> => String::from(&s[1..(s.len()-1)]);

Unit: () = "()" => ();

Bool: bool = {
    "true" => true,
    "false" => false,
};

Name: &'input str = r"[a-zA-Z_]+'?";
